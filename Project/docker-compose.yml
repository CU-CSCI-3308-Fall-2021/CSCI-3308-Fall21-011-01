
services:
  heroku-cli:
    build: ./heroku
    env_file: ./heroku/.env
  
  db:
    build: ./db
    env_file: .env                                
    volumes:
      - newcooldb:/var/lib/postgresql/data
      - ./db/init_data:/docker-entrypoint-initdb.d 
                                           
                                            
  web:
    build:
      context: ./
      dockerfile: Dockerfile
      target: devapp                            # Use a non-root user node                            # w#   *.ejs are visible without restarting docker-compose.
    depends_on:
      - db      
    env_file: .env                                # This indicates that docker should start the database first,
                                            
    ports:
        - "3000:3000"                           # Here we do need to publish the port for viewing on the host.
    volumes:
      - ./src:/app/src                       # Binds the current directory (containing our source code) into the image,
                                                #  so that changes made to the source code on the host
                                                #  are reflected witin the container.
                                              # This is a semi-hack for this lab that runs both npm install
                                                # and node index.js (see the prestart command in package.json)


# This defines our volume(s), which will perist throughout startups.
# If you want to get rid of a hanging volume, e.g. to test your database init,
# run `docker-compose rm -v`. Note that this will remove ALL of your data, so
# be extra sure you've made a stable backup somewhere.
volumes:
  newcooldb: {}