
services:

  db:
    image: mysql:8.0
    # Environment variables to setup postgres. Note that this is not secure, and
    # in production (or your project), you should store these in a different
    # file [5] or use secrets [6]. In no case should such files be uploaded to GitHub.
    environment:
      MYSQL_DATABASE: projectdatabase
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: root
    expose:
      - "3306"                                  
    volumes:
      - volumedb:/var/lib/mysql                 # Creates a docker managed volume to persist your data.
      - ./Database:/docker-entrypoint-initdb.d  # Binds ./database to docker-entrypoint-initdb.d.
                                                #   The postgres image will run any files in this directory on startup,
                                                #   in our case the file `init_data/create.sql`
    
  web:
    web:
    image: node:12
    user: "node"                                # Use a non-root user node
    working_dir: /home/node/app                 # with home directory /home/node/app
    # environment:
    #   - NODE_ENV=production                   # << Use this when deploying your application,
    #                                           #   currently we have it off so that changes to
    #                                           #   *.ejs are visible without restarting docker-compose.
    depends_on:
      - db                                      # This indicates that docker should start the database first,
                                                # otherwise our website would have no data.
    ports:
        - "3000:3000"                           # Here we do need to publish the port for viewing on the host.
    volumes:
      - ./Project                       # Binds the current directory (containing our source code) into the image,
                                                #  so that changes made to the source code on the host
                                                #  are reflected witin the container.
    command: "npm start"                        # This is a semi-hack for this lab that runs both npm install
                                                # and node index.js (see the prestart command in package.json)


# This defines our volume(s), which will perist throughout startups.
# If you want to get rid of a hanging volume, e.g. to test your database init,
# run `docker-compose rm -v`. Note that this will remove ALL of your data, so
# be extra sure you've made a stable backup somewhere.
volumes:
  volumedb: {}
